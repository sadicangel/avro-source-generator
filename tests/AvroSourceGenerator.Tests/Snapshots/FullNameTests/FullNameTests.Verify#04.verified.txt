// <auto-generated/>
#pragma warning disable CS8618, CS8633, CS8714, CS8775, CS8981
#nullable enable
    /// <summary>
    /// A simple name (attribute) and no namespace attribute: use the null namespace (""); the full name is 'Example'.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("AvroSourceGenerator", "1.0.0.0")]
    public partial record Example : global::Avro.Specific.ISpecificRecord
    {
        public required Simple inheritNull { get; init; }
        public required global::@explicit.Simple explicitNamespace { get; init; }
        public required global::a.full.Name fullName { get; init; }
    
        public global::Avro.Schema Schema { get => Example.s_schema; }
        private static readonly global::Avro.Schema s_schema = global::Avro.Schema.Parse(
        """
        {
          "type": "record",
          "name": "Example",
          "doc": "A simple name (attribute) and no namespace attribute: use the null namespace (\u0022\u0022); the full name is \u0027Example\u0027.",
          "fields": [
            {
              "name": "inheritNull",
              "type": {
                "type": "enum",
                "name": "Simple",
                "doc": "A simple name (attribute) and no namespace attribute: inherit the null namespace of the enclosing type \u0027Example\u0027. The full name is \u0027Simple\u0027.",
                "symbols": [
                  "a",
                  "b"
                ]
              }
            },
            {
              "name": "explicitNamespace",
              "type": {
                "type": "fixed",
                "name": "Simple",
                "namespace": "explicit",
                "doc": "A simple name (attribute) and a namespace (attribute); the full name is \u0027explicit.Simple\u0027 (this is a different type than of the \u0027inheritNull\u0027 field).",
                "size": 12
              }
            },
            {
              "name": "fullName",
              "type": {
                "type": "record",
                "name": "Name",
                "namespace": "a.full",
                "doc": "A name attribute with a full name, so the namespace attribute is ignored. The full name is \u0027a.full.Name\u0027, and the namespace is \u0027a.full\u0027.",
                "fields": [
                  {
                    "name": "inheritNamespace",
                    "type": {
                      "type": "enum",
                      "name": "Understanding",
                      "namespace": "a.full",
                      "doc": "A simple name (attribute) and no namespace attribute: inherit the namespace of the enclosing type \u0027a.full.Name\u0027. The full name is \u0027a.full.Understanding\u0027.",
                      "symbols": [
                        "d",
                        "e"
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
        """);
    
        public object? Get(int fieldPos)
        {
            switch (fieldPos)
            {
                case 0: return this.inheritNull;
                case 1: return this.explicitNamespace;
                case 2: return this.fullName;
                default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Get()");
            }
        }
        
        public void Put(int fieldPos, object? fieldValue)
        {
            switch (fieldPos)
            {
                case 0:
                    Set_inheritNull(this, (Simple)fieldValue!); break;
                    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_inheritNull")]
                    extern static void Set_inheritNull(Example obj, Simple value);
                case 1:
                    Set_explicitNamespace(this, (global::@explicit.Simple)fieldValue!); break;
                    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_explicitNamespace")]
                    extern static void Set_explicitNamespace(Example obj, global::@explicit.Simple value);
                case 2:
                    Set_fullName(this, (global::a.full.Name)fieldValue!); break;
                    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_fullName")]
                    extern static void Set_fullName(Example obj, global::a.full.Name value);
                default:
                    throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Put()");
            }
        }
    }

#nullable restore
#pragma warning restore CS8618, CS8633, CS8714, CS8775
