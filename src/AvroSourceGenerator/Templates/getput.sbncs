{{~ $object = UseNullableReferenceTypes ? 'object?' : 'object' ~}}
public {{~ $.override ? ' override ' : ' ' ~}} {{ $object}} Get(int fieldPos)
{
    switch (fieldPos)
    {
        {{~ for field in $.schema.Fields ~}}
        case {{ for.index }}: return this.{{ field.Name }};
        {{~ end ~}}
        default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Get()");
    }
}

{{~ $fieldValue = UseNullableReferenceTypes ? 'fieldValue!' : 'fieldValue' ~}}
{{~ if !UseInitOnlyProperties ~}}
public {{~ $.override ? ' override ' : ' ' ~}} void Put(int fieldPos, {{ $object }} fieldValue)
{
    switch (fieldPos)
    {
        {{~ for field in $.schema.Fields ~}}
        {{~ $expr = !field.IsNullable ? $"({ field.Type }){ $fieldValue }" : $"{ $fieldValue } is null ? null : ({ field.UnderlyingType }){ $fieldValue }" ~}}
        case {{ for.index }}: this.{{ field.Name }} = {{ $expr }}; break;
        {{~ end ~}}
        default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Put()");
    }
}
{{~ else if UseUnsafeAccessors ~}}
public {{~ $.override ? ' override ' : ' ' ~}} void Put(int fieldPos, {{ $object }} fieldValue)
{
    switch (fieldPos)
    {
        {{~ for field in $.schema.Fields ~}}
        {{~ $expr = !field.IsNullable ? $"({ field.Type }){ $fieldValue }" : $"{ $fieldValue } is null ? null : ({ field.UnderlyingType }){ $fieldValue }" ~}}
        case {{ for.index }}:
            Set_{{ field.Name }}(this, {{ $expr }}); break;
            [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = {{ $"\"set_{ field.Name }\"" }})]
            extern static void Set_{{ field.Name }}({{ $.schema.CSharpName }} obj, {{ field.Type }} value);
        {{~ end ~}}
        default:
            throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Put()");
    }
}
{{~ else ~}}
public {{~ $.override ? ' override ' : ' ' ~}} void Put(int fieldPos, {{ $object }} fieldValue)
{
    switch (fieldPos)
    {
        {{~ for field in $.schema.Fields ~}}
        {{~ $expr = !field.IsNullable ? $"({ field.Type }){ $fieldValue }" : $"{ $fieldValue } is null ? null : ({ field.UnderlyingType }){ $fieldValue }" ~}}
        case {{ for.index }}: {{ $.schema.CSharpName.Name }}Reflection.Set_{{ field.Name }}(this, {{ $expr }}); break;
        {{~ end ~}}
        default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Put()");
    }
}

private static class {{ $.schema.CSharpName.Name }}Reflection
{
    {{~ for field in $.schema.Fields ~}}
    public static readonly global::System.Action<{{ $.schema.CSharpName.Name }}, {{ field.Type }}> Set_{{ field.Name }} = CreateSetter<{{ field.Type }}>({{ field.Name | string.literal }});
    {{~ end ~}}

    private static global::System.Action<{{ $.schema.CSharpName.Name }}, TProperty> CreateSetter<TProperty>(string propertyName)
    {
        var obj = global::System.Linq.Expressions.Expression.Parameter(typeof({{ $.schema.CSharpName }}), "obj");
        var value = global::System.Linq.Expressions.Expression.Parameter(typeof(TProperty), "value");
        var property = global::System.Linq.Expressions.Expression.Property(obj, typeof({{ $.schema.CSharpName }}).GetProperty(propertyName){{~ UseNullableReferenceTypes ? '!' : '' ~}});
        var assign = global::System.Linq.Expressions.Expression.Assign(property, value);
        var lambda = global::System.Linq.Expressions.Expression.Lambda<global::System.Action<{{ $.schema.CSharpName }}, TProperty>>(assign, obj, value);
        return lambda.Compile();
    }
}
{{~ end ~}}
