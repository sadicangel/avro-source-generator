{
  Diagnostics: null,
  Documents: [
    {
      FileName: AvroSourceGenerator\AvroSourceGenerator.AvroSourceGenerator\TestEnum.Avro.g.cs,
      Content:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AvroSourceGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable CS8618, CS8633, CS8714, CS8775
#nullable enable
namespace SchemaNamespace
{
    [global::System.CodeDom.Compiler.GeneratedCode("AvroSourceGenerator", "1.0.0.0")]
    public enum TestEnum
    {
        A,
        B,
        C,
    }
}
#nullable restore
#pragma warning restore CS8618, CS8633, CS8714, CS8775

    },
    {
      FileName: AvroSourceGenerator\AvroSourceGenerator.AvroSourceGenerator\NestedRecord.Avro.g.cs,
      Content:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AvroSourceGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable CS8618, CS8633, CS8714, CS8775
#nullable enable
namespace SchemaNamespace
{
    [global::System.CodeDom.Compiler.GeneratedCode("AvroSourceGenerator", "1.0.0.0")]
    public partial class NestedRecord : global::Avro.Specific.ISpecificRecord
    {    
        public string NestedStringField { get; set; }
        public int NestedIntField { get; set; }
     
        public global::Avro.Schema Schema { get => NestedRecord._SCHEMA; }
        public static readonly global::Avro.Schema _SCHEMA = global::Avro.Schema.Parse("""
        {
                    "type": "record",
                    "name": "NestedRecord",
                    "fields": [
                        { "name": "NestedStringField", "type": "string" },
                        { "name": "NestedIntField", "type": "int" }
                    ]
                }
        """);
    
        public object? Get(int fieldPos)
        {
            switch (fieldPos)
            {
                case 0: return this.NestedStringField;
                case 1: return this.NestedIntField;
                default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Get()");
            }
        }
        
        public void Put(int fieldPos, object? fieldValue)
        {
            switch (fieldPos)
            {
                case 0: this.NestedStringField = (string)fieldValue!; break;
                case 1: this.NestedIntField = (int)fieldValue!; break;
                default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Put()");
            }
        }
    }

}
#nullable restore
#pragma warning restore CS8618, CS8633, CS8714, CS8775

    },
    {
      FileName: AvroSourceGenerator\AvroSourceGenerator.AvroSourceGenerator\Record.Avro.g.cs,
      Content:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AvroSourceGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable CS8618, CS8633, CS8714, CS8775
#nullable enable
namespace SchemaNamespace
{
    [global::System.CodeDom.Compiler.GeneratedCode("AvroSourceGenerator", "1.0.0.0")]
    public partial class Record : global::Avro.Specific.ISpecificRecord
    {    
        public string StringField { get; set; }
        public int IntField { get; set; }
        public long LongField { get; set; }
        public float FloatField { get; set; }
        public double DoubleField { get; set; }
        public bool BooleanField { get; set; }
        public byte[] BytesField { get; set; }
        public string? NullableStringField { get; set; }
        public int DefaultIntField { get; set; } = 42;
        public SchemaNamespace.TestEnum EnumField { get; set; }
        public global::System.Collections.Generic.IList<string> ArrayField { get; set; }
        public global::System.Collections.Generic.IDictionary<string, int> MapField { get; set; }
        public SchemaNamespace.NestedRecord NestedRecordField { get; set; }
        public global::System.DateTime LogicalDateField { get; set; }
        public global::System.DateTime LogicalTimestampField { get; set; }
     
        public global::Avro.Schema Schema { get => Record._SCHEMA; }
        public static readonly global::Avro.Schema _SCHEMA = global::Avro.Schema.Parse("""
        {
            "type": "record",
            "namespace": "SchemaNamespace",
            "name": "Record",
            "fields": [
                { "name": "StringField", "type": "string" },
                { "name": "IntField", "type": "int" },
                { "name": "LongField", "type": "long" },
                { "name": "FloatField", "type": "float" },
                { "name": "DoubleField", "type": "double" },
                { "name": "BooleanField", "type": "boolean" },
                { "name": "BytesField", "type": "bytes" },
                { "name": "NullableStringField", "type": ["null", "string"], "default": null },
                { "name": "DefaultIntField", "type": "int", "default": 42 },
                { "name": "EnumField", "type": { "type": "enum", "name": "TestEnum", "symbols": ["A", "B", "C"] } },
                { "name": "ArrayField", "type": { "type": "array", "items": "string" } },
                { "name": "MapField", "type": { "type": "map", "values": "int" } },
                { "name": "NestedRecordField", "type": {
                    "type": "record",
                    "name": "NestedRecord",
                    "fields": [
                        { "name": "NestedStringField", "type": "string" },
                        { "name": "NestedIntField", "type": "int" }
                    ]
                } },
                { "name": "LogicalDateField", "type": { "type": "int", "logicalType": "date" } },
                { "name": "LogicalTimestampField", "type": { "type": "long", "logicalType": "timestamp-millis" } }
            ]
        }
        """);
    
        public object? Get(int fieldPos)
        {
            switch (fieldPos)
            {
                case 0: return this.StringField;
                case 1: return this.IntField;
                case 2: return this.LongField;
                case 3: return this.FloatField;
                case 4: return this.DoubleField;
                case 5: return this.BooleanField;
                case 6: return this.BytesField;
                case 7: return this.NullableStringField;
                case 8: return this.DefaultIntField;
                case 9: return this.EnumField;
                case 10: return this.ArrayField;
                case 11: return this.MapField;
                case 12: return this.NestedRecordField;
                case 13: return this.LogicalDateField;
                case 14: return this.LogicalTimestampField;
                default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Get()");
            }
        }
        
        public void Put(int fieldPos, object? fieldValue)
        {
            switch (fieldPos)
            {
                case 0: this.StringField = (string)fieldValue!; break;
                case 1: this.IntField = (int)fieldValue!; break;
                case 2: this.LongField = (long)fieldValue!; break;
                case 3: this.FloatField = (float)fieldValue!; break;
                case 4: this.DoubleField = (double)fieldValue!; break;
                case 5: this.BooleanField = (bool)fieldValue!; break;
                case 6: this.BytesField = (byte[])fieldValue!; break;
                case 7: this.NullableStringField = (string?)fieldValue!; break;
                case 8: this.DefaultIntField = (int)fieldValue!; break;
                case 9: this.EnumField = (TestEnum)fieldValue!; break;
                case 10: this.ArrayField = (IList<string>)fieldValue!; break;
                case 11: this.MapField = (IDictionary<string, int>)fieldValue!; break;
                case 12: this.NestedRecordField = (NestedRecord)fieldValue!; break;
                case 13: this.LogicalDateField = (DateTime)fieldValue!; break;
                case 14: this.LogicalTimestampField = (DateTime)fieldValue!; break;
                default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Put()");
            }
        }
    }

}
#nullable restore
#pragma warning restore CS8618, CS8633, CS8714, CS8775

    }
  ]
}