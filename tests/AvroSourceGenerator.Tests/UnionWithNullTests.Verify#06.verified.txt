// <auto-generated/>
#pragma warning disable CS8618, CS8633, CS8714, CS8775, CS8981
#nullable enable
namespace com.example.user
{
    /// <summary>
    /// User profile showing various types of union fields
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("AvroSourceGenerator", "1.0.0.0")]
    public partial record UserProfile : global::Avro.Specific.ISpecificRecord
    {
        /// <summary>
        /// Invalid in Avro: Demonstrates an empty union (included for test purposes only)
        /// </summary>
        public required object emptyUnion { get; init; }
        /// <summary>
        /// User display and language preferences
        /// </summary>
        public required global::com.example.user.Preferences preferences { get; init; }
        /// <summary>
        /// Mailing address; may be null if not provided
        /// </summary>
        public global::com.example.user.Address? address { get; init; }
        /// <summary>
        /// Additional profile info, optional field
        /// </summary>
        public global::com.example.user.ProfileMetadata? metadata { get; init; }
        /// <summary>
        /// User can be contacted by email or phone; field is optional
        /// </summary>
        /// <remarks>
        /// Represents a union schema that can be one of the following:
        /// <list type="bullet">
        /// <item><see langword="null"/></item>
        /// <item><see cref="global::com.example.user.EmailContact"/></item>
        /// <item><see cref="global::com.example.user.PhoneContact"/></item>
        /// </list>
        /// </remarks>
        public global::com.example.user.UserProfileContactVariant? contact { get; init; }
    
        public global::Avro.Schema Schema { get => UserProfile.s_schema; }
        private static readonly global::Avro.Schema s_schema = global::Avro.Schema.Parse(
        """
        {
          "type": "record",
          "name": "UserProfile",
          "namespace": "com.example.user",
          "doc": "User profile showing various types of union fields",
          "fields": [
            {
              "name": "emptyUnion",
              "type": [],
              "doc": "Invalid in Avro: Demonstrates an empty union (included for test purposes only)"
            },
            {
              "name": "preferences",
              "type": [
                {
                  "type": "record",
                  "name": "Preferences",
                  "namespace": "com.example.user",
                  "fields": [
                    {
                      "name": "language",
                      "type": "string"
                    },
                    {
                      "name": "darkMode",
                      "type": "boolean",
                      "default": false
                    }
                  ]
                }
              ],
              "doc": "User display and language preferences",
              "default": {
                "language": "en",
                "darkMode": false
              }
            },
            {
              "name": "address",
              "type": [
                "null",
                {
                  "type": "record",
                  "name": "Address",
                  "namespace": "com.example.user",
                  "fields": [
                    {
                      "name": "street",
                      "type": "string"
                    },
                    {
                      "name": "city",
                      "type": "string"
                    },
                    {
                      "name": "postalCode",
                      "type": "string"
                    }
                  ]
                }
              ],
              "doc": "Mailing address; may be null if not provided",
              "default": null
            },
            {
              "name": "metadata",
              "type": [
                {
                  "type": "record",
                  "name": "ProfileMetadata",
                  "namespace": "com.example.user",
                  "fields": [
                    {
                      "name": "createdAt",
                      "type": "string"
                    },
                    {
                      "name": "lastLogin",
                      "type": [
                        "null",
                        "string"
                      ],
                      "default": null
                    }
                  ]
                },
                "null"
              ],
              "doc": "Additional profile info, optional field",
              "default": {
                "createdAt": "1970-01-01T00:00:00Z",
                "lastLogin": null
              }
            },
            {
              "name": "contact",
              "type": [
                "null",
                {
                  "type": "record",
                  "name": "EmailContact",
                  "namespace": "com.example.user",
                  "fields": [
                    {
                      "name": "email",
                      "type": "string"
                    }
                  ]
                },
                {
                  "type": "record",
                  "name": "PhoneContact",
                  "namespace": "com.example.user",
                  "fields": [
                    {
                      "name": "phoneNumber",
                      "type": "string"
                    }
                  ]
                }
              ],
              "doc": "User can be contacted by email or phone; field is optional",
              "default": null
            }
          ]
        }
        """);
    
        public object? Get(int fieldPos)
        {
            switch (fieldPos)
            {
                case 0: return this.emptyUnion;
                case 1: return this.preferences;
                case 2: return this.address;
                case 3: return this.metadata;
                case 4: return this.contact;
                default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Get()");
            }
        }
        
        public void Put(int fieldPos, object? fieldValue)
        {
            switch (fieldPos)
            {
                case 0:
                    Set_emptyUnion(this, (object)fieldValue!); break;
                    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_emptyUnion")]
                    extern static void Set_emptyUnion(global::com.example.user.UserProfile obj, object value);
                case 1:
                    Set_preferences(this, (global::com.example.user.Preferences)fieldValue!); break;
                    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_preferences")]
                    extern static void Set_preferences(global::com.example.user.UserProfile obj, global::com.example.user.Preferences value);
                case 2:
                    Set_address(this, fieldValue! is null ? null : (global::com.example.user.Address)fieldValue!); break;
                    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_address")]
                    extern static void Set_address(global::com.example.user.UserProfile obj, global::com.example.user.Address? value);
                case 3:
                    Set_metadata(this, fieldValue! is null ? null : (global::com.example.user.ProfileMetadata)fieldValue!); break;
                    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_metadata")]
                    extern static void Set_metadata(global::com.example.user.UserProfile obj, global::com.example.user.ProfileMetadata? value);
                case 4:
                    Set_contact(this, fieldValue! is null ? null : (global::com.example.user.UserProfileContactVariant)fieldValue!); break;
                    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_contact")]
                    extern static void Set_contact(global::com.example.user.UserProfile obj, global::com.example.user.UserProfileContactVariant? value);
                default:
                    throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Put()");
            }
        }
    }

}
#nullable restore
#pragma warning restore CS8618, CS8633, CS8714, CS8775
