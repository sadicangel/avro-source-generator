// <auto-generated/>
#pragma warning disable CS8618, CS8633, CS8714, CS8775, CS8981
#nullable enable
namespace SchemaNamespace
{
    [global::System.CodeDom.Compiler.GeneratedCode("AvroSourceGenerator", "1.0.0.0")]
    public partial record Record : global::Avro.Specific.ISpecificRecord
    {
        public required int Value1 { get; init; }
        public required string Value2 { get; init; }
    
        public global::Avro.Schema Schema { get => Record._SCHEMA; }
        public static readonly global::Avro.Schema _SCHEMA = global::Avro.Schema.Parse("""
        {
          "type": "record",
          "namespace": "SchemaNamespace",
          "name": "Record",
          "fields": [
            {
              "name": "Value1",
              "type": "int"
            },
            {
              "name": "Value2",
              "type": "string"
            }
          ]
        }
        """);
    
        public object? Get(int fieldPos)
        {
            switch (fieldPos)
            {
                case 0: return this.Value1;
                case 1: return this.Value2;
                default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Get()");
            }
        }
        
        public void Put(int fieldPos, object? fieldValue)
        {
            switch (fieldPos)
            {
                case 0: RecordReflection.Set_Value1(this, (int)fieldValue!); break;
                case 1: RecordReflection.Set_Value2(this, (string)fieldValue!); break;
                default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Put()");
            }
        }
        
        private static class RecordReflection
        {
            public static readonly global::System.Action<Record, int> Set_Value1 = CreateSetter<int>("Value1");
            public static readonly global::System.Action<Record, string> Set_Value2 = CreateSetter<string>("Value2");
        
            private static global::System.Action<Record, TProperty> CreateSetter<TProperty>(string propertyName)
            {
                var obj = global::System.Linq.Expressions.Expression.Parameter(typeof(Record), "obj");
                var value = global::System.Linq.Expressions.Expression.Parameter(typeof(TProperty), "value");
                var property = global::System.Linq.Expressions.Expression.Property(obj, typeof(Record).GetProperty(propertyName)!);
                var assign = global::System.Linq.Expressions.Expression.Assign(property, value);
                var lambda = global::System.Linq.Expressions.Expression.Lambda<global::System.Action<Record, TProperty>>(assign, obj, value);
                return lambda.Compile();
            }
        }
    }

}
#nullable restore
#pragma warning restore CS8618, CS8633, CS8714, CS8775
