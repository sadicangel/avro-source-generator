{
  Diagnostics: null,
  Documents: [
    {
      FileName: AvroSourceGenerator/AvroSourceGenerator.AvroSourceGenerator/TestEnum.Avro.g.cs,
      Content:
// <auto-generated/>
namespace SchemaNamespace
{
    [global::System.CodeDom.Compiler.GeneratedCode("AvroSourceGenerator", "1.0.0.0")]
    public enum TestEnum
    {
        A,
        B,
    }
}

    },
    {
      FileName: AvroSourceGenerator/AvroSourceGenerator.AvroSourceGenerator/Wrapper.Avro.g.cs,
      Content:
// <auto-generated/>
#pragma warning disable CS8618, CS8633, CS8714, CS8775
#nullable enable
namespace SchemaNamespace
{
    [global::System.CodeDom.Compiler.GeneratedCode("AvroSourceGenerator", "1.0.0.0")]
    public partial class Wrapper : global::Avro.Specific.ISpecificRecord
    {
        public global::SchemaNamespace.TestEnum EnumField { get; init; }
    
        public global::Avro.Schema Schema { get => Wrapper._SCHEMA; }
        public static readonly global::Avro.Schema _SCHEMA = global::Avro.Schema.Parse(
        "{\"type\":\"record\",\"namespace\":\"SchemaNamespace\",\"name\":\"Wrapper\",\"fields\":[{\"name\":\"EnumField\",\"type\":{\"type\":\"enum\",\"name\":\"TestEnum\",\"symbols\":[\"A\",\"B\"]}}]}"
        );
    
        public object? Get(int fieldPos)
        {
            switch (fieldPos)
            {
                case 0: return this.EnumField;
                default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Get()");
            }
        }
        
        public void Put(int fieldPos, object? fieldValue)
        {
            switch (fieldPos)
            {
                case 0: WrapperReflection.Set_EnumField(this, (global::SchemaNamespace.TestEnum)fieldValue!); break;
                default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Put()");
            }
        }
        
        private static class WrapperReflection
        {
            public static readonly global::System.Action<Wrapper, global::SchemaNamespace.TestEnum> Set_EnumField = CreateSetter<global::SchemaNamespace.TestEnum>("EnumField");
        
            private static global::System.Action<Wrapper, TProperty> CreateSetter<TProperty>(string propertyName)
            {
                var obj = global::System.Linq.Expressions.Expression.Parameter(typeof(Wrapper), "obj");
                var value = global::System.Linq.Expressions.Expression.Parameter(typeof(TProperty), "value");
                var property = global::System.Linq.Expressions.Expression.Property(obj, typeof(Wrapper).GetProperty(propertyName)!);
                var assign = global::System.Linq.Expressions.Expression.Assign(property, value);
                var lambda = global::System.Linq.Expressions.Expression.Lambda<global::System.Action<Wrapper, TProperty>>(assign, obj, value);
                return lambda.Compile();
            }
        }
    }

}
#nullable restore
#pragma warning restore CS8618, CS8633, CS8714, CS8775

    }
  ]
}