using System.Text.Json;
using Xunit;

namespace AvroSourceGenerator.Tests;

public class AvroSchemaGeneratorUnitTests
{
    private const string Comment = """
        This is a multiline comment.
        It can span multiple lines.

        Yep! It can.
        """;
    private readonly string _source = $$""""
        using System;
        using AvroSourceGenerator;

        namespace AvroSourceGenerator.Tests;

        [Avro(LanguageFeatures = LanguageFeatures.{{TestHelpers.LanguageFeatures}}, UseCSharpNamespace = true)]
        public partial record class User
        {
            public const string AvroSchema = """
            {
                "type": "record",
                "namespace": "Tests",
                "name": "User",
                "fields" : [
                    { "name": "Name", "type": "string" },
                    { "name": "Age", "type": "int", "default": 18 },
                    { "name": "Description", "type": [ "string", "null" ] }
                ],
                "aliases": ["Person", "Human"],
                "doc": "{{JsonEncodedText.Encode(Comment)}}"
            }
            """;
        }
        """";

    [Fact]
    public void Generator_WithCandidates_AddRecord()
    {
        const string ExpectedContent = """"
            // <auto-generated/>
            #pragma warning disable CS8618, CS8633, CS8714, CS8775
            #nullable enable
            namespace AvroSourceGenerator.Tests
            {
                /// <summary>
                /// This is a multiline comment.
                /// It can span multiple lines.
                /// 
                /// Yep! It can.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("AvroSourceGenerator", "1.0.0.0")]
                [global::AvroSourceGenerator.AvroAliases("Person", "Human")]
                public partial class User : global::Avro.Specific.ISpecificRecord
                {    
                    public required string Name { get; init; }
                    public int Age { get; init; } = 18;
                    public string? Description { get; init; }
                 
                    public global::Avro.Schema Schema { get => User._SCHEMA; }
                    public static readonly global::Avro.Schema _SCHEMA = global::Avro.Schema.Parse("""
                    {
                        "type": "record",
                        "namespace": "Tests",
                        "name": "User",
                        "fields" : [
                            { "name": "Name", "type": "string" },
                            { "name": "Age", "type": "int", "default": 18 },
                            { "name": "Description", "type": [ "string", "null" ] }
                        ],
                        "aliases": ["Person", "Human"],
                        "doc": "This is a multiline comment.\r\nIt can span multiple lines.\r\n\r\nYep! It can."
                    }
                    """);
                
                    public object? Get(int fieldPos)
                    {
                        switch (fieldPos)
                        {
                            case 0: return this.Name;
                            case 1: return this.Age;
                            case 2: return this.Description;
                            default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Get()");
                        }
                    }
                    
                    public void Put(int fieldPos, object? fieldValue)
                    {
                        switch (fieldPos)
                        {
                            case 0:
                                Set_Name(this, (string)fieldValue!); break;
                                [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Name")]
                                extern static void Set_Name(User obj, string value);
                            case 1:
                                Set_Age(this, (int)fieldValue!); break;
                                [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Age")]
                                extern static void Set_Age(User obj, int value);
                            case 2:
                                Set_Description(this, (string?)fieldValue!); break;
                                [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Description")]
                                extern static void Set_Description(User obj, string? value);
                            default:
                                throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Put()");
                        }
                    }
                }

            }
            #nullable restore
            #pragma warning restore CS8618, CS8633, CS8714, CS8775

            """";

        TestHelpers.Verify(_source,
            new Document("User.Avro.g.cs", ExpectedContent));
    }
}
