// <auto-generated/>
#pragma warning disable CS8618, CS8633, CS8714, CS8775, CS8981
#nullable enable
namespace SchemaNamespace
{
    [global::System.CodeDom.Compiler.GeneratedCode("AvroSourceGenerator", "1.0.0.0")]
    public partial record Record : global::Avro.Specific.ISpecificRecord
    {
        public required string Field { get; init; }
    
        public global::Avro.Schema Schema { get => Record.s_schema; }
        private static readonly global::Avro.Schema s_schema = global::Avro.Schema.Parse(
        """
        {
          "type": "record",
          "name": "Record",
          "namespace": "SchemaNamespace",
          "fields": [
            {
              "name": "Field",
              "type": "string"
            }
          ]
        }
        """);
    
        public object? Get(int fieldPos)
        {
            switch (fieldPos)
            {
                case 0: return this.Field;
                default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Get()");
            }
        }
        
        public void Put(int fieldPos, object? fieldValue)
        {
            switch (fieldPos)
            {
                case 0: RecordReflection.Set_Field(this, (string)fieldValue!); break;
                default: throw new global::Avro.AvroRuntimeException($"Bad index {fieldPos} in Put()");
            }
        }
        
        private static class RecordReflection
        {
            public static readonly global::System.Action<Record, string> Set_Field = CreateSetter<string>("Field");
        
            private static global::System.Action<Record, TProperty> CreateSetter<TProperty>(string propertyName)
            {
                var obj = global::System.Linq.Expressions.Expression.Parameter(typeof(global::SchemaNamespace.Record), "obj");
                var value = global::System.Linq.Expressions.Expression.Parameter(typeof(TProperty), "value");
                var property = global::System.Linq.Expressions.Expression.Property(obj, typeof(global::SchemaNamespace.Record).GetProperty(propertyName)!);
                var assign = global::System.Linq.Expressions.Expression.Assign(property, value);
                var lambda = global::System.Linq.Expressions.Expression.Lambda<global::System.Action<global::SchemaNamespace.Record, TProperty>>(assign, obj, value);
                return lambda.Compile();
            }
        }
    }

}
#nullable restore
#pragma warning restore CS8618, CS8633, CS8714, CS8775
